<div otvl-web>
type: sf-img
src: /assets/images/k3s-loc-sp/versEtangDeSoulcem.jpg
alt: Article image
title: Vers l'étang de Soulcem
class_: v-img-header
</div>

# Developing and simple hosting with K3s

<div otvl-web>
type: sf-page-dates
</div>

## Introduction

[K3s](https://k3s.io/) is a lightweight yet very effective
[Kubernetes](https://kubernetes.io/) open source distribution.

While Docker and the Kubernetes orchestrator are leveraged more and more often
for hosting application components,
two interesting questions often remain open:

- how to work locally as a developer:
this is useful to set up, test and debug
the deployment more efficiently than if working remotely,
but also to leverage local computing resources
- how to orchestrate application containers in production environments
where there is no managed Kubernetes solution, or no cost-effective one either

This article provides feedback for deploying and using K3s for development
and simple production.

## Installing K3s for development

### Kubernetes control plane

Depending on your way of working and preference,
you can install K3s either directly on the development host if it is running Linux,
or on a separate Linux Virtual Machine that you will access remotely with `kubectl`.
Unless you want to test multi-node specific use-cases in development,
the default installation with all the components on a single node
is all what you need.

K3s installs the container runtime `[containerd](https://github.com/containerd/containerd)`
for running Docker-compatible containers, and that is a strong system requirement.
If you are already running Docker on the host, install K3s on a separate Virtual Machine,
or configure the installer to
[leverage](https://docs.k3s.io/advanced#using-docker-as-the-container-runtime)
it.

When ready, connect to the target host and run:

    :::text
    # curl -sfL https://get.k3s.io | sh -

Having a look at the [architecture document](https://docs.k3s.io/architecture),
it means that we run the K3s server components on the installed host,
and there is no K3s agent node.

We find on this document the following familiar Kubernetes components:

- "`api-server`" is the cluster API entry point;
- "`scheduler`" is responsible to allocate resources to the containers to be run;
- "`controller-manager`" is responsible to apply requested changes on the cluster;
- "`kubelet`" is an agent running on each node to control the state of containers;
- "`kube-proxy`" is responsible to configure network rules to enable secured network
  communication among the components and with external systems;

We also find the "`kine`" component that,
in this default installation,
enables the K3s server to store the cluster configuration and state
in a `SQLite` database, but could leverage `etcd` as well.

<div otvl-web>
type: sf-img
src: /assets/images/k3s-loc-sp/architecture.jpg
alt: Deployed architecture schema
title: K3s deployed architecture
class_: v-img
</div>

What is specific to K3s is that those components are packaged and run
in a single Linux process,
making the most efficient usage of CPU, memory and network resources.
Other Kubernetes distributions
typically run them as individual containers and Linux system services.

    :::text
    # systemctl status k3s.service
    ● k3s.service - Lightweight Kubernetes
         Loaded: loaded (/etc/systemd/system/k3s.service; enabled; preset: enabled)
         Active: active (running) since Wed 2024-01-03 09:21:54 CET; 3h 10min ago
           Docs: https://k3s.io
       Main PID: 2570 (k3s-server)
          Tasks: 213
         Memory: 1.7G
            CPU: 26min 24.955s

A few containers are also deployed for the control plane:

    :::text
    # kubectl get pods -n kube-system
    NAME                                      READY   STATUS      RESTARTS   AGE
    local-path-provisioner-84db5d44d9-72qfw   1/1     Running     0          4h50m
    helm-install-traefik-crd-w7fs6            0/1     Completed   0          4h50m
    coredns-6799fbcd5-bctpp                   1/1     Running     0          4h50m
    helm-install-traefik-6lmt2                0/1     Completed   1          4h50m
    svclb-traefik-e23bb5a4-4zrcl              2/2     Running     0          4h47m
    traefik-8c645c69c-xrrcr                   1/1     Running     0          4h47m
    metrics-server-67c658944b-rlrzk           1/1     Running     0          4h50m

## References

- [K3s project](https://github.com/k3s-io/k3s/)
- [K3s documentation](https://docs.k3s.io/)
- [Containerd project](https://github.com/containerd/containerd)
